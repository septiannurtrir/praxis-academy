{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-903e78b242ef>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-903e78b242ef>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    function greeting() {\u001b[0m\n\u001b[0m                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "function greeting() {\n",
    "  console.log('Hello World');\n",
    "}// Invoking the function\n",
    "greeting();  // prints 'Hello World'\n",
    "\n",
    "/ We can add properties to functions like we do with objects\n",
    "greeting.lang = 'English';// Prints 'English'\n",
    "console.log(greeting.lang);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n",
      "English\n"
     ]
    }
   ],
   "source": [
    "#python\n",
    "\n",
    "def greeting():\n",
    "    print(\"Hello World\")\n",
    "greeting()\n",
    "\n",
    "greeting.lang = \"English\"\n",
    "print(\"English\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-10-cc3822fac1e9>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-10-cc3822fac1e9>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    const square = function(x) {\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "function formalGreeting() {\n",
    "  console.log(\"How are you?\");\n",
    "}function casualGreeting() {\n",
    "  console.log(\"What's up?\");\n",
    "}function greet(type, greetFormal, greetCasual) {\n",
    "  if(type === 'formal') {\n",
    "    greetFormal();\n",
    "  } else if(type === 'casual') {\n",
    "    greetCasual();\n",
    "  }\n",
    "}// prints 'What's up?'\n",
    "greet('casual', formalGreeting, casualGreeting);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What`s up?\n"
     ]
    }
   ],
   "source": [
    "#python\n",
    "\n",
    "def formalGreeting():\n",
    "    print(\"How are you\")\n",
    "def casualGreeting():\n",
    "    print(\"What`s up?\")\n",
    "def greet(type, greetFormal, greetCasual):\n",
    "    if (type == 'formal'):\n",
    "        greetFormal()\n",
    "    elif(type == 'casual'):\n",
    "        greetCasual()\n",
    "    \n",
    "greet('casual', formalGreeting, casualGreeting)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-19-985aee0e5649>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-19-985aee0e5649>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    const arr1 = [1, 2, 3];\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "const arr1 = [1, 2, 3];\n",
    "const arr2 = [];for(let i = 0; i < arr1.length; i++) {\n",
    "  arr2.push(arr1[i] * 2);\n",
    "}// prints [ 2, 4, 6 ]\n",
    "console.log(arr2);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 4, 6]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#python\n",
    "\n",
    "arr1 = [1, 2, 3]\n",
    "list(map(lambda x: x * 2, arr1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-21-6d4d12aaa352>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-6d4d12aaa352>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    const birthYear = [1975, 1997, 2002, 1995, 1985];\u001b[0m\n\u001b[0m                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#Example 2, without higher function\n",
    "\n",
    "const birthYear = [1975, 1997, 2002, 1995, 1985];\n",
    "const ages = [];for(let i = 0; i < birthYear.length; i++) {\n",
    "  let age = 2018 - birthYear[i];\n",
    "  ages.push(age);\n",
    "}// prints [ 43, 21, 16, 23, 33 ]\n",
    "console.log(ages);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43 21 16 23 33\n"
     ]
    }
   ],
   "source": [
    "#python\n",
    "\n",
    "birthYear = [1975, 1997, 2002, 1995, 1985]\n",
    "ages = map(lambda x: 2018 - x, birthYear)\n",
    "print(*ages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43\n",
      "21\n",
      "16\n",
      "23\n",
      "33\n"
     ]
    }
   ],
   "source": [
    "birthYear = [1975, 1997, 2002, 1995, 1985]\n",
    "ages = [] \n",
    "for x in range(0, len(birthYear)):\n",
    "    ages = 2018 - birthYear[x]\n",
    "    print(ages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-26-5039e56d8525>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-26-5039e56d8525>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    const persons = [\u001b[0m\n\u001b[0m                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# examples 1\n",
    "const persons = [\n",
    "  { name: 'Peter', age: 16 },\n",
    "  { name: 'Mark', age: 18 },\n",
    "  { name: 'John', age: 27 },\n",
    "  { name: 'Jane', age: 14 },\n",
    "  { name: 'Tony', age: 24},\n",
    "];const fullAge = [];for(let i = 0; i < persons.length; i++) {\n",
    "  if(persons[i].age >= 18) {\n",
    "    fullAge.push(persons[i]);\n",
    "  }\n",
    "}console.log(fullAge);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Peter': {'name': 'Peter', 'age': 16}, 'Mark': {'name': 'Mark', 'age': 18}, 'John': {'name': 'John', 'age': 27}, 'Jane': {'name': 'Jane', 'age': 14}, 'Tony': {'name': 'Tony', 'age': 24}}\n"
     ]
    }
   ],
   "source": [
    "#python\n",
    "\n",
    "persons  = {}\n",
    "    \n",
    "persons[\"Peter\"] = {\n",
    "  \"name\" : \"Peter\",\n",
    "  \"age\" : 16\n",
    "}\n",
    "persons[\"Mark\"] = {\n",
    "  \"name\" : \"Mark\",\n",
    "  \"age\" : 18\n",
    "}\n",
    "persons[\"John\"] = {\n",
    "  \"name\" : \"John\",\n",
    "  \"age\" : 27\n",
    "}\n",
    "persons[\"Jane\"] = {\n",
    "  \"name\" : \"Jane\",\n",
    "  \"age\" : 14\n",
    "}\n",
    "persons[\"Tony\"] = {\n",
    "  \"name\" : \"Tony\",\n",
    "  \"age\" : 24\n",
    "}\n",
    "\n",
    "\n",
    "print(persons)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
